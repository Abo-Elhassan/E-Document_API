// <auto-generated />
using System;
using EDocument_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDocument_EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230923114703_addDefaultValueForReqeustNumber")]
    partial class addDefaultValueForReqeustNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.Property<string>("ItAdminId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.HasKey("ItAdminId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationItAdmin", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("ApplicationUserRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartureAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LuggageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RetrunDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("CarRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationOwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOwnerId");

                    b.ToTable("DefinedApplication", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestedApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedApplicationId");

                    b.ToTable("DefinedApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewersNumber")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DefinedRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 16L,
                            RequestName = "PO",
                            ReviewersNumber = 1,
                            RouteName = "/Procurement/PO/"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DelegatedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DelegatedUntil")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("DefinedRequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("DefinedRequestReviewer", (string)null);

                    b.HasData(
                        new
                        {
                            DefinedRequestId = 1L,
                            AssignedReviewerId = "51124",
                            ReviewerType = "Basic",
                            StageName = "Finance Reviewer",
                            StageNumber = 1
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "DefinedRequestId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("DefinedRequestRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84",
                            DefinedRequestId = 1L,
                            Permission = "Request"
                        },
                        new
                        {
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975",
                            DefinedRequestId = 1L,
                            Permission = "Review"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentIcon = "Administration.svg",
                            DepartmentName = "Administration",
                            ManagerId = "50269"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentName = "Freight Forwarding",
                            ManagerId = "90010"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentName = "Business Transformation",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentIcon = "Commercial.svg",
                            DepartmentName = "Commercial",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentIcon = "Communications.svg",
                            DepartmentName = "Communications",
                            ManagerId = "51668"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentIcon = "Customer Service.svg",
                            DepartmentName = "Customer Service",
                            ManagerId = "51229"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentName = "Executive Management",
                            ManagerId = "Exp-16"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentName = "Finance",
                            ManagerId = "51124"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentName = "Governmental Relation",
                            ManagerId = "50962"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentName = "HC - DUBUY Sales",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentName = "HC - Samsung SDS project",
                            ManagerId = "50140"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentIcon = "IT.svg",
                            DepartmentName = "IT",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentIcon = "OPS-BGC.svg",
                            DepartmentName = "OPS-Cargo & Bulk",
                            ManagerId = "50354"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentName = "OPS-Containers",
                            ManagerId = "50141"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentIcon = "People .svg",
                            DepartmentName = "People",
                            ManagerId = "50279"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentIcon = "Procurement.svg",
                            DepartmentName = "Procurement",
                            ManagerId = "51188"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentName = "Projects & Facility Management",
                            ManagerId = "51659"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentName = "QHSE",
                            ManagerId = "50882"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentIcon = "Security.svg",
                            DepartmentName = "Security",
                            ManagerId = "50263"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentIcon = "Stores.svg",
                            DepartmentName = "Store",
                            ManagerId = "50000"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentIcon = "Technical Engineering.svg",
                            DepartmentName = "Engineering",
                            ManagerId = "50136"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("DomainAccountRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PoAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorNumber")
                        .HasColumnType("int");

                    b.HasKey("PoNumber");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("PoRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrentStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId", "ApplicationId", "RoleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RequestApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReviewerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("RequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("RequestReviewer", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "security");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HeadId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.ToTable("Section", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 1L,
                            SectionName = "Administration"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentId = 2L,
                            SectionName = "Freight Forwarding"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentId = 3L,
                            SectionName = "Business Transformation"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentId = 4L,
                            HeadId = "51509",
                            SectionName = "Commercial / Containers"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentId = 4L,
                            HeadId = "51583",
                            SectionName = "Commercial Bulk / GC"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentId = 5L,
                            SectionName = "Communications"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentId = 6L,
                            SectionName = "Customer Service"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentId = 7L,
                            SectionName = "Executive Management"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentId = 8L,
                            SectionName = "Finance"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentId = 9L,
                            SectionName = "Governmental Relation"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentId = 10L,
                            HeadId = "90015",
                            SectionName = "Samsung SDS project"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentId = 11L,
                            HeadId = "90008",
                            SectionName = "DUBUY- Sales"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentId = 12L,
                            SectionName = "IT"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentId = 13L,
                            HeadId = "51449",
                            SectionName = "OPS-Cargo & Bulk"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentId = 13L,
                            HeadId = "50844",
                            SectionName = "OPS- DRI"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentId = 14L,
                            HeadId = "50670",
                            SectionName = "OPS-Containers"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentId = 14L,
                            HeadId = "50128",
                            SectionName = "OPS-CFS"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentId = 15L,
                            SectionName = "People"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentId = 16L,
                            SectionName = "Procurement"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentId = 17L,
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentId = 18L,
                            HeadId = "51520",
                            SectionName = "Safety"
                        },
                        new
                        {
                            Id = 22L,
                            DepartmentId = 18L,
                            SectionName = "Clinic"
                        },
                        new
                        {
                            Id = 23L,
                            DepartmentId = 19L,
                            SectionName = "Security"
                        },
                        new
                        {
                            Id = 24L,
                            DepartmentId = 20L,
                            SectionName = "Store"
                        },
                        new
                        {
                            Id = 25L,
                            DepartmentId = 21L,
                            HeadId = "51090",
                            SectionName = "TEC-Crane"
                        },
                        new
                        {
                            Id = 26L,
                            DepartmentId = 21L,
                            HeadId = "51529",
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 27L,
                            DepartmentId = 21L,
                            HeadId = "50562",
                            SectionName = "TEC-Planning"
                        },
                        new
                        {
                            Id = 28L,
                            DepartmentId = 21L,
                            HeadId = "51126",
                            SectionName = "TEC-Workshop"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryNationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("smalldatetime");

                    b.Property<float>("CostAllocation")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedTravelTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FlightDestination")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlightOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MissionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("TravelDeskRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SectionId");

                    b.ToTable("User", "security");

                    b.HasData(
                        new
                        {
                            Id = "50269",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f6b0c6d6-f7a2-4737-9f01-c12f50e5b332",
                            DepartmentId = 1L,
                            Email = "admin_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN_MANGER@DPWORLD.COM",
                            NormalizedUserName = "ADMIN_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Administration",
                            SecurityStamp = "01ccae7e-e309-4067-ac23-cf0b175a9e2c",
                            TwoFactorEnabled = false,
                            UserName = "admin_manager"
                        },
                        new
                        {
                            Id = "90010",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d6e72415-2745-4c09-97ae-a6fbbfa5b7d8",
                            DepartmentId = 2L,
                            Email = "freightforwarding_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hanaa Mohamed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREIGHTFORWARDING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FF_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Freight Forwarding",
                            SecurityStamp = "5ff6edf2-3fbb-490a-bc18-147bb973b75e",
                            TwoFactorEnabled = false,
                            UserName = "ff_manager"
                        },
                        new
                        {
                            Id = "51330",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "76ec2e2a-0328-4abd-95af-b0e761bee06d",
                            DepartmentId = 3L,
                            Email = "businesstransformation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSTRANSFORMATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "BT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Business Transformation",
                            SecurityStamp = "6c5cc8db-86ff-420c-930a-2ab8603ddeba",
                            TwoFactorEnabled = false,
                            UserName = "bt_manager"
                        },
                        new
                        {
                            Id = "51573",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8d4b83c8-cd78-466c-9a26-c8a355b540b7",
                            DepartmentId = 4L,
                            Email = "commercial_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMERCIAL_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Commercial",
                            SecurityStamp = "8aa262ea-b096-42e9-b9ea-b077ff663abe",
                            TwoFactorEnabled = false,
                            UserName = "commercial_manager"
                        },
                        new
                        {
                            Id = "51668",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c886888b-9d68-4182-ae3f-7633a1263170",
                            DepartmentId = 5L,
                            Email = "communications_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Amina Hatem",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMUNICATIONS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMUNICATIONS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Communications",
                            SecurityStamp = "e2e3f535-8d02-42b7-87be-dcca4e0a93ff",
                            TwoFactorEnabled = false,
                            UserName = "communications_manager"
                        },
                        new
                        {
                            Id = "51229",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "efdffaf0-07ca-4a48-b1fe-b10feb825ba5",
                            DepartmentId = 6L,
                            Email = "customerservice_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Nagah",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "CS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Customer Service",
                            SecurityStamp = "d77258e4-0ad8-4afb-9024-2d37a3a70092",
                            TwoFactorEnabled = false,
                            UserName = "cs_manager"
                        },
                        new
                        {
                            Id = "Exp-16",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "eedb80c3-44d7-4255-a479-968586f27789",
                            DepartmentId = 7L,
                            Email = "executivemanagement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Urs Moll",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXECUTIVEMANAGEMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "EM_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Executive Management",
                            SecurityStamp = "46de5c76-c14c-4579-b98f-2b918f849d6c",
                            TwoFactorEnabled = false,
                            UserName = "em_manager"
                        },
                        new
                        {
                            Id = "51124",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "e38c8ebc-6fbb-4914-836f-25e0adab3a93",
                            DepartmentId = 8L,
                            Email = "finance_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mustafa Sultan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FINANCE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FINANCE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Finance",
                            SecurityStamp = "7202773a-f087-4084-b20b-392168d51a41",
                            TwoFactorEnabled = false,
                            UserName = "finance_manager"
                        },
                        new
                        {
                            Id = "50962",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "6f768218-a98e-49fc-8992-9f4c93adab50",
                            DepartmentId = 9L,
                            Email = "governmentalrelation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Tarek",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOVERNMENTALRELATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "GR_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Governmental Relation",
                            SecurityStamp = "33908ebf-5a69-4b26-af50-84fc7529f9f3",
                            TwoFactorEnabled = false,
                            UserName = "gr_manager"
                        },
                        new
                        {
                            Id = "51572",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d51d2624-6cff-47ea-92ca-20fc1921e9c8",
                            DepartmentId = 10L,
                            Email = "hc-ds_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - DUBUY Sales",
                            SecurityStamp = "f3c2c55b-0237-4d82-bfa5-0c476df640e8",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_manager"
                        },
                        new
                        {
                            Id = "50140",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "21eca7a5-9a19-4d97-8e41-a373e276a31f",
                            DepartmentId = 11L,
                            Email = "hc-ssp_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - Samsung SDS project",
                            SecurityStamp = "a55e6c6e-f155-492a-b6e3-b148438fcfb2",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_manager"
                        },
                        new
                        {
                            Id = "51331",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "9bf5a160-e325-478e-91a7-cd1944c42c04",
                            DepartmentId = 12L,
                            Email = "it_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "IT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of IT",
                            SecurityStamp = "94030ac1-3f4a-4e6a-a0e8-a92eabddb17d",
                            TwoFactorEnabled = false,
                            UserName = "it_manager"
                        },
                        new
                        {
                            Id = "50354",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "7fda5fcc-cf07-4666-a989-553de0c5d11a",
                            DepartmentId = 13L,
                            Email = "ops-bgc_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Radwan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-BGC_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-BGC_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Cargo & Bulk",
                            SecurityStamp = "9986f6ea-08f0-49c2-8b86-0a86afe9d3d7",
                            TwoFactorEnabled = false,
                            UserName = "ops-bgc_manager"
                        },
                        new
                        {
                            Id = "50141",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ec2cb970-a4d7-4711-bcfc-f81c5e637cf6",
                            DepartmentId = 14L,
                            Email = "ops-ct_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Containers",
                            SecurityStamp = "21627821-029f-43f5-b924-0c0d3a0372ca",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_manager"
                        },
                        new
                        {
                            Id = "50279",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ee5f7c32-09d2-419a-8d04-15d6cebba1bb",
                            DepartmentId = 15L,
                            Email = "people_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Waleed Aboelgadayl",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEOPLE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PEOPLE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of People",
                            SecurityStamp = "1a7912e8-f9bd-4516-8ce5-454d0f822233",
                            TwoFactorEnabled = false,
                            UserName = "people_manager"
                        },
                        new
                        {
                            Id = "51188",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5739976b-952e-49e6-a04b-79d1c728f84f",
                            DepartmentId = 16L,
                            Email = "procurement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Tamer Elsayed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROCUREMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROCURMENT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Procurment",
                            SecurityStamp = "ee38a1f6-67ad-49b3-b62e-a9ba503cd41e",
                            TwoFactorEnabled = false,
                            UserName = "procurment_manager"
                        },
                        new
                        {
                            Id = "51659",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ff2d3abd-b456-4e51-8eab-7bd86fa6cb42",
                            DepartmentId = 17L,
                            Email = "projectsfacilitymanager_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Mandour",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTSFACILITYMANAGER_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Projects & Facility Management",
                            SecurityStamp = "5cc1d1aa-29b9-4d0c-9756-87783a7222a6",
                            TwoFactorEnabled = false,
                            UserName = "projects_manager"
                        },
                        new
                        {
                            Id = "50882",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8ea8456a-27bd-4eae-9d88-fe801fa9cbdc",
                            DepartmentId = 18L,
                            Email = "qhse_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Abdelghany",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "QHSE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of QHSE",
                            SecurityStamp = "a904ba95-9f35-4bf1-aae2-7265e10025f3",
                            TwoFactorEnabled = false,
                            UserName = "qhse_manager"
                        },
                        new
                        {
                            Id = "50263",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "09e6902d-3a37-4dcf-95e0-8835934e803c",
                            DepartmentId = 19L,
                            Email = "security_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECURITY_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "SECURITY_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Security",
                            SecurityStamp = "573c41a3-81c2-454f-b023-f98136e6ca31",
                            TwoFactorEnabled = false,
                            UserName = "security_manager"
                        },
                        new
                        {
                            Id = "50000",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c85852cd-4a60-4ed1-8693-37c833c83890",
                            DepartmentId = 20L,
                            Email = "stores_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STORES_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "STORES_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Stores",
                            SecurityStamp = "e5613c98-90cd-4cd5-aee5-935fa7964386",
                            TwoFactorEnabled = false,
                            UserName = "stores_manager"
                        },
                        new
                        {
                            Id = "50136",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c4aa8454-65ca-4b26-9935-676d7355010a",
                            DepartmentId = 21L,
                            Email = "engineering_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINEERING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "ENGINEERING_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Engineering",
                            SecurityStamp = "0e51c80a-f3df-4ce8-bd43-1c4901f0c992",
                            TwoFactorEnabled = false,
                            UserName = "engineering_manager"
                        },
                        new
                        {
                            Id = "51509",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "96e40908-470a-47a4-858c-c671c1d12b4e",
                            DepartmentId = 4L,
                            Email = "commercial-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-CT_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Commercial / Containers Section Head",
                            SecurityStamp = "e7279179-df87-4665-b715-82bf98ad8fed",
                            TwoFactorEnabled = false,
                            UserName = "commercial-ct_sec_head"
                        },
                        new
                        {
                            Id = "51583",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "6e1c61bc-90aa-4a55-b82d-c58aa98113ae",
                            DepartmentId = 4L,
                            Email = "commercial-bgc_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-BGC_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-BGC_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "CommercialBulk / GC Section Head",
                            SecurityStamp = "8a711d45-912b-4f9a-a246-05eab133ea8d",
                            TwoFactorEnabled = false,
                            UserName = "commercial-bgc_sec_head"
                        },
                        new
                        {
                            Id = "90015",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "9aa4d7b9-74ca-4a06-b514-961f6168d7b9",
                            DepartmentId = 10L,
                            Email = "hc-ssp_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - Samsung SDS project  Section Head",
                            SecurityStamp = "27a3fab7-165a-4969-945e-6a990bc4763f",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_sec_head"
                        },
                        new
                        {
                            Id = "90008",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "23379ce4-e0ef-46b8-91d3-b95d6b051ee5",
                            DepartmentId = 11L,
                            Email = "hc-ds_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - DUBUY Sales Section Head",
                            SecurityStamp = "8855ed84-6019-4379-b2e8-437dca37ed6c",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_sec_head"
                        },
                        new
                        {
                            Id = "51520",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c89bac9e-c55a-4030-baf0-3c6e2abed930",
                            DepartmentId = 18L,
                            Email = "qhse_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "QHSE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "QHSE Section HEad",
                            SecurityStamp = "10b5ce10-532f-47d9-aa92-f255063638f4",
                            TwoFactorEnabled = false,
                            UserName = "qhse_sec_head"
                        },
                        new
                        {
                            Id = "51449",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "7d041794-ad86-4bec-b7f1-18f9948d2216",
                            DepartmentId = 13L,
                            Email = "ops-cg_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CG_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CG_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Cargo & Bulk Section Head",
                            SecurityStamp = "7ba70b1d-20e6-4076-9510-3c46ad54f640",
                            TwoFactorEnabled = false,
                            UserName = "ops-cg_sec_head"
                        },
                        new
                        {
                            Id = "50844",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "e3ad59d6-59b1-48d1-a8f4-8190a91187dd",
                            DepartmentId = 13L,
                            Email = "ops-dri_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-DRI_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-DRI Section Head",
                            SecurityStamp = "131a2307-d494-4395-a94a-59492c72fa52",
                            TwoFactorEnabled = false,
                            UserName = "ops-dri_sec_head"
                        },
                        new
                        {
                            Id = "50670",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "180ba251-80ee-4b6f-92e8-e9bfe35c3db4",
                            DepartmentId = 14L,
                            Email = "ops-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Containers Section Head",
                            SecurityStamp = "f7f0e788-0e27-474b-9ed7-264a82795c56",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_sec_head"
                        },
                        new
                        {
                            Id = "50128",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "0650c5d6-dc69-4542-9806-bd5ab6a32923",
                            DepartmentId = 14L,
                            Email = "ops-cfs_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CFS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CFS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-CFS Section Head",
                            SecurityStamp = "28137324-04d7-4e1d-baaf-e9b50f160bab",
                            TwoFactorEnabled = false,
                            UserName = "ops-cfs_sec_head"
                        },
                        new
                        {
                            Id = "51126",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "086f64bd-05ea-4d42-8d9b-1456d65cd836",
                            DepartmentId = 21L,
                            Email = "tec-workshop_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-WORKSHOP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-WORKSHOP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Workshop Section Head",
                            SecurityStamp = "81e214b2-e721-4448-89bb-c51893f0d30a",
                            TwoFactorEnabled = false,
                            UserName = "tec-workshop_sec_head"
                        },
                        new
                        {
                            Id = "51090",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "54e78bdf-ab72-49e9-a4a1-6b38c3870228",
                            DepartmentId = 21L,
                            Email = "tec-crane_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-CRANE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-CRANE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Crane Section Head",
                            SecurityStamp = "6d62e2e6-f71e-4dfb-8e29-bab839df5709",
                            TwoFactorEnabled = false,
                            UserName = "tec-crane_sec_head"
                        },
                        new
                        {
                            Id = "50562",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "0a2f0998-f73f-4eee-ad18-6225a7901178",
                            Email = "tec-planning_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-PLANNING_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-PLANNING_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Planning Section Head",
                            SecurityStamp = "73e9274a-5828-4d05-9eca-c97c86180744",
                            TwoFactorEnabled = false,
                            UserName = "tec-planning_sec_head"
                        },
                        new
                        {
                            Id = "51529",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "bff6aafa-11f3-40c1-bfd8-9c4b6a4cf9cb",
                            DepartmentId = 21L,
                            Email = "projects_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Projects Section Head",
                            SecurityStamp = "839a9e5f-2a4f-4b4b-90e3-f068364456ae",
                            TwoFactorEnabled = false,
                            UserName = "projects_sec_head"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VoucherAmount")
                        .HasColumnType("real");

                    b.Property<string>("VoucherCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryName", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("VoucherRequest", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "51188",
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84"
                        },
                        new
                        {
                            UserId = "51124",
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "security");
                });

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ItAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_User");
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("ApplicationUserRequest")
                        .HasForeignKey("EDocument_Data.Models.ApplicationUserRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("CarRequest")
                        .HasForeignKey("EDocument_Data.Models.CarRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "ApplicationOwner")
                        .WithMany("OwnedApplications")
                        .HasForeignKey("ApplicationOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplication_User");

                    b.Navigation("ApplicationOwner");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "RequestedApplication")
                        .WithMany("DefinedApplicationRoles")
                        .HasForeignKey("RequestedApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplicationRole_RequestedApplication");

                    b.Navigation("RequestedApplication");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("DefinedRequests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequest_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_DefinedRequest");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_DefinedRequest");

                    b.HasOne("EDocument_Data.Models.Role", "Role")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_Role");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Department_User");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("DomainAccountRequest")
                        .HasForeignKey("EDocument_Data.Models.DomainAccountRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DomainAccountRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("PoRequest")
                        .HasForeignKey("EDocument_Data.Models.PoRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PoRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Creator")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("Requests")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_DefinedRequest");

                    b.Navigation("Creator");

                    b.Navigation("DefinedRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "Application")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_Request");

                    b.HasOne("EDocument_Data.Models.DefinedApplicationRole", "Role")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplicationRole");

                    b.Navigation("Application");

                    b.Navigation("Request");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_Request");

                    b.Navigation("Request");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_Department");

                    b.HasOne("EDocument_Data.Models.User", "Head")
                        .WithOne("MangedSection")
                        .HasForeignKey("EDocument_Data.Models.Section", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_User");

                    b.Navigation("Department");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("TravelDeskRequest")
                        .HasForeignKey("EDocument_Data.Models.TravelDeskRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TravelDeskRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_User");

                    b.HasOne("EDocument_Data.Models.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Section");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("VoucherRequest")
                        .HasForeignKey("EDocument_Data.Models.VoucherRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoucherRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Navigation("DefinedApplicationRoles");

                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("DefinedRequestRoles");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Navigation("DefinedRequests");

                    b.Navigation("Employees");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Navigation("ApplicationUserRequest");

                    b.Navigation("Attachments");

                    b.Navigation("CarRequest");

                    b.Navigation("DomainAccountRequest");

                    b.Navigation("PoRequest");

                    b.Navigation("RequestApplicationRoles");

                    b.Navigation("RequestReviewers");

                    b.Navigation("TravelDeskRequest");

                    b.Navigation("VoucherRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Navigation("DefinedRequestRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Navigation("CreatedRequests");

                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("ManagedEmployees");

                    b.Navigation("MangedSection");

                    b.Navigation("OwnedApplications");

                    b.Navigation("RequestReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
