// <auto-generated />
using System;
using EDocument_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDocument_EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230925102752_dddDefaultValueForStatus")]
    partial class dddDefaultValueForStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.Property<string>("ItAdminId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.HasKey("ItAdminId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationItAdmin", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("ApplicationUserRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartureAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LuggageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RetrunDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("CarRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationOwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOwnerId");

                    b.ToTable("DefinedApplication", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestedApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedApplicationId");

                    b.ToTable("DefinedApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewersNumber")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DefinedRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 16L,
                            RequestName = "PO",
                            ReviewersNumber = 1,
                            RouteName = "/Procurement/PO/"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DelegatedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DelegatedUntil")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("DefinedRequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("DefinedRequestReviewer", (string)null);

                    b.HasData(
                        new
                        {
                            DefinedRequestId = 1L,
                            AssignedReviewerId = "51124",
                            ReviewerType = "Basic",
                            StageName = "Finance Reviewer",
                            StageNumber = 1
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "DefinedRequestId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("DefinedRequestRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84",
                            DefinedRequestId = 1L,
                            Permission = "Request"
                        },
                        new
                        {
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975",
                            DefinedRequestId = 1L,
                            Permission = "Review"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentIcon = "Administration.svg",
                            DepartmentName = "Administration",
                            ManagerId = "50269"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentName = "Freight Forwarding",
                            ManagerId = "90010"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentName = "Business Transformation",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentIcon = "Commercial.svg",
                            DepartmentName = "Commercial",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentIcon = "Communications.svg",
                            DepartmentName = "Communications",
                            ManagerId = "51668"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentIcon = "Customer Service.svg",
                            DepartmentName = "Customer Service",
                            ManagerId = "51229"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentName = "Executive Management",
                            ManagerId = "Exp-16"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentName = "Finance",
                            ManagerId = "51124"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentName = "Governmental Relation",
                            ManagerId = "50962"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentName = "HC - DUBUY Sales",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentName = "HC - Samsung SDS project",
                            ManagerId = "50140"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentIcon = "IT.svg",
                            DepartmentName = "IT",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentIcon = "OPS-BGC.svg",
                            DepartmentName = "OPS-Cargo & Bulk",
                            ManagerId = "50354"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentName = "OPS-Containers",
                            ManagerId = "50141"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentIcon = "People .svg",
                            DepartmentName = "People",
                            ManagerId = "50279"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentIcon = "Procurement.svg",
                            DepartmentName = "Procurement",
                            ManagerId = "51188"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentName = "Projects & Facility Management",
                            ManagerId = "51659"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentName = "QHSE",
                            ManagerId = "50882"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentIcon = "Security.svg",
                            DepartmentName = "Security",
                            ManagerId = "50263"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentIcon = "Stores.svg",
                            DepartmentName = "Store",
                            ManagerId = "50000"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentIcon = "Technical Engineering.svg",
                            DepartmentName = "Engineering",
                            ManagerId = "50136"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("DomainAccountRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.Property<string>("RequestNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PoAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorNumber")
                        .HasColumnType("int");

                    b.HasKey("RequestNumber");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("PoNumber");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("PoRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CurrentStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId", "ApplicationId", "RoleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RequestApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReviewerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("RequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("RequestReviewer", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "security");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HeadId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.ToTable("Section", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 1L,
                            SectionName = "Administration"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentId = 2L,
                            SectionName = "Freight Forwarding"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentId = 3L,
                            SectionName = "Business Transformation"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentId = 4L,
                            HeadId = "51509",
                            SectionName = "Commercial / Containers"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentId = 4L,
                            HeadId = "51583",
                            SectionName = "Commercial Bulk / GC"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentId = 5L,
                            SectionName = "Communications"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentId = 6L,
                            SectionName = "Customer Service"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentId = 7L,
                            SectionName = "Executive Management"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentId = 8L,
                            SectionName = "Finance"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentId = 9L,
                            SectionName = "Governmental Relation"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentId = 10L,
                            HeadId = "90015",
                            SectionName = "Samsung SDS project"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentId = 11L,
                            HeadId = "90008",
                            SectionName = "DUBUY- Sales"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentId = 12L,
                            SectionName = "IT"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentId = 13L,
                            HeadId = "51449",
                            SectionName = "OPS-Cargo & Bulk"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentId = 13L,
                            HeadId = "50844",
                            SectionName = "OPS- DRI"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentId = 14L,
                            HeadId = "50670",
                            SectionName = "OPS-Containers"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentId = 14L,
                            HeadId = "50128",
                            SectionName = "OPS-CFS"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentId = 15L,
                            SectionName = "People"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentId = 16L,
                            SectionName = "Procurement"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentId = 17L,
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentId = 18L,
                            HeadId = "51520",
                            SectionName = "Safety"
                        },
                        new
                        {
                            Id = 22L,
                            DepartmentId = 18L,
                            SectionName = "Clinic"
                        },
                        new
                        {
                            Id = 23L,
                            DepartmentId = 19L,
                            SectionName = "Security"
                        },
                        new
                        {
                            Id = 24L,
                            DepartmentId = 20L,
                            SectionName = "Store"
                        },
                        new
                        {
                            Id = 25L,
                            DepartmentId = 21L,
                            HeadId = "51090",
                            SectionName = "TEC-Crane"
                        },
                        new
                        {
                            Id = 26L,
                            DepartmentId = 21L,
                            HeadId = "51529",
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 27L,
                            DepartmentId = 21L,
                            HeadId = "50562",
                            SectionName = "TEC-Planning"
                        },
                        new
                        {
                            Id = 28L,
                            DepartmentId = 21L,
                            HeadId = "51126",
                            SectionName = "TEC-Workshop"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryNationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("smalldatetime");

                    b.Property<float>("CostAllocation")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedTravelTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FlightDestination")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlightOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MissionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("TravelDeskRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SectionId");

                    b.ToTable("User", "security");

                    b.HasData(
                        new
                        {
                            Id = "50269",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "0b95aa5c-76df-4d0f-a6b5-342a199b0edc",
                            DepartmentId = 1L,
                            Email = "admin_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN_MANGER@DPWORLD.COM",
                            NormalizedUserName = "ADMIN_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Administration",
                            SecurityStamp = "2c55ec82-6145-40ae-936d-c5680500520a",
                            TwoFactorEnabled = false,
                            UserName = "admin_manager"
                        },
                        new
                        {
                            Id = "90010",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "59971b70-3110-4185-a5a6-30cf0c2a51c5",
                            DepartmentId = 2L,
                            Email = "freightforwarding_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hanaa Mohamed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREIGHTFORWARDING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FF_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Freight Forwarding",
                            SecurityStamp = "836c1e5b-a9f4-475a-9cd9-7e1e3ca09e5a",
                            TwoFactorEnabled = false,
                            UserName = "ff_manager"
                        },
                        new
                        {
                            Id = "51330",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f80059d1-2d38-42c1-b076-a6d83da2b9f6",
                            DepartmentId = 3L,
                            Email = "businesstransformation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSTRANSFORMATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "BT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Business Transformation",
                            SecurityStamp = "a70d1047-d7df-41dc-b604-88ea9f53c476",
                            TwoFactorEnabled = false,
                            UserName = "bt_manager"
                        },
                        new
                        {
                            Id = "51573",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "9099fe97-a8dd-4e5b-b1d8-03371a5106bd",
                            DepartmentId = 4L,
                            Email = "commercial_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMERCIAL_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Commercial",
                            SecurityStamp = "0ff6fd02-05fc-4cff-8d11-6bb761a4dc0f",
                            TwoFactorEnabled = false,
                            UserName = "commercial_manager"
                        },
                        new
                        {
                            Id = "51668",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c9d64ed5-5a43-4911-9ca7-05efc34a9f83",
                            DepartmentId = 5L,
                            Email = "communications_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Amina Hatem",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMUNICATIONS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMUNICATIONS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Communications",
                            SecurityStamp = "30dd7c1e-80ab-48d4-ab06-1c57d8fa2536",
                            TwoFactorEnabled = false,
                            UserName = "communications_manager"
                        },
                        new
                        {
                            Id = "51229",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "585f1058-6ee0-4387-8425-9f975929f9df",
                            DepartmentId = 6L,
                            Email = "customerservice_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Nagah",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "CS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Customer Service",
                            SecurityStamp = "fb4f32f6-d1c3-4105-a134-ed40957103f9",
                            TwoFactorEnabled = false,
                            UserName = "cs_manager"
                        },
                        new
                        {
                            Id = "Exp-16",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "73fa49a4-43c0-464f-b493-4ea4eb49a1c5",
                            DepartmentId = 7L,
                            Email = "executivemanagement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Urs Moll",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXECUTIVEMANAGEMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "EM_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Executive Management",
                            SecurityStamp = "ec0bfd24-022b-4f35-83f9-6c7dc8b26720",
                            TwoFactorEnabled = false,
                            UserName = "em_manager"
                        },
                        new
                        {
                            Id = "51124",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d7819dbf-fc17-458f-898d-c9395ba2ecf4",
                            DepartmentId = 8L,
                            Email = "finance_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mustafa Sultan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FINANCE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FINANCE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Finance",
                            SecurityStamp = "d7f0673f-3342-45e0-b5de-d1ac923d10f5",
                            TwoFactorEnabled = false,
                            UserName = "finance_manager"
                        },
                        new
                        {
                            Id = "50962",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "cf9c7ef5-a6ca-4d74-8532-29e31d8d5ce5",
                            DepartmentId = 9L,
                            Email = "governmentalrelation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Tarek",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOVERNMENTALRELATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "GR_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Governmental Relation",
                            SecurityStamp = "9417618c-edf7-4630-9aa7-29a0ecbda9fe",
                            TwoFactorEnabled = false,
                            UserName = "gr_manager"
                        },
                        new
                        {
                            Id = "51572",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8fdda5d6-c70e-4102-805b-23d216ed7d43",
                            DepartmentId = 10L,
                            Email = "hc-ds_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - DUBUY Sales",
                            SecurityStamp = "b56edcb0-0a88-4693-af78-2b73110818be",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_manager"
                        },
                        new
                        {
                            Id = "50140",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8d5c3c31-bf90-43aa-a0ce-0b3e1dddab30",
                            DepartmentId = 11L,
                            Email = "hc-ssp_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - Samsung SDS project",
                            SecurityStamp = "86f3c803-9000-4a19-b111-f11691eabce3",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_manager"
                        },
                        new
                        {
                            Id = "51331",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "1e934509-f8db-4e33-a3ac-18e4bbf9290e",
                            DepartmentId = 12L,
                            Email = "it_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "IT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of IT",
                            SecurityStamp = "97177a3c-17bb-4c8f-aa24-a9ab0858f3be",
                            TwoFactorEnabled = false,
                            UserName = "it_manager"
                        },
                        new
                        {
                            Id = "50354",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "450438f2-a273-433e-897c-83607b2e3256",
                            DepartmentId = 13L,
                            Email = "ops-bgc_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Radwan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-BGC_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-BGC_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Cargo & Bulk",
                            SecurityStamp = "3f4133fd-8784-48c9-a110-43006b9fb5d3",
                            TwoFactorEnabled = false,
                            UserName = "ops-bgc_manager"
                        },
                        new
                        {
                            Id = "50141",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ca59a9ca-63e9-4d1c-b9d1-7c58ec9ee622",
                            DepartmentId = 14L,
                            Email = "ops-ct_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Containers",
                            SecurityStamp = "e3c92d15-417a-4a20-9c57-684ed90398ca",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_manager"
                        },
                        new
                        {
                            Id = "50279",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b19a7c29-d34f-4846-92c0-4f8b759bdb9f",
                            DepartmentId = 15L,
                            Email = "people_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Waleed Aboelgadayl",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEOPLE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PEOPLE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of People",
                            SecurityStamp = "5b1fc24b-8726-490c-9709-783c3903dfcc",
                            TwoFactorEnabled = false,
                            UserName = "people_manager"
                        },
                        new
                        {
                            Id = "51188",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8a82ebba-328b-4058-b2f8-19b1bf791581",
                            DepartmentId = 16L,
                            Email = "procurement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Tamer Elsayed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROCUREMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROCURMENT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Procurment",
                            SecurityStamp = "7d3e1127-1df3-4433-a440-90b5a2843485",
                            TwoFactorEnabled = false,
                            UserName = "procurment_manager"
                        },
                        new
                        {
                            Id = "51659",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b1c73d81-1421-4fc9-8a7b-ae0acead59e3",
                            DepartmentId = 17L,
                            Email = "projectsfacilitymanager_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Mandour",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTSFACILITYMANAGER_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Projects & Facility Management",
                            SecurityStamp = "b38b26bb-0f9b-4ce5-a54a-75330d3737b4",
                            TwoFactorEnabled = false,
                            UserName = "projects_manager"
                        },
                        new
                        {
                            Id = "50882",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "1b1ec3e7-872e-4ae8-8be4-be3b5867b5f2",
                            DepartmentId = 18L,
                            Email = "qhse_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Abdelghany",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "QHSE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of QHSE",
                            SecurityStamp = "28a65dce-f11d-465f-9816-179787767368",
                            TwoFactorEnabled = false,
                            UserName = "qhse_manager"
                        },
                        new
                        {
                            Id = "50263",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "a7981076-8791-454c-888f-78d79ecf71ea",
                            DepartmentId = 19L,
                            Email = "security_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECURITY_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "SECURITY_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Security",
                            SecurityStamp = "228cc0ca-1187-4dba-b53f-36820a95d876",
                            TwoFactorEnabled = false,
                            UserName = "security_manager"
                        },
                        new
                        {
                            Id = "50000",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "3e81998a-758c-4241-9e04-55ab1b8f7a39",
                            DepartmentId = 20L,
                            Email = "stores_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STORES_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "STORES_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Stores",
                            SecurityStamp = "5d347499-c643-4391-bdd6-d24e3cebe286",
                            TwoFactorEnabled = false,
                            UserName = "stores_manager"
                        },
                        new
                        {
                            Id = "50136",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "45d35848-ae50-4f4b-a36d-f60fcb48648c",
                            DepartmentId = 21L,
                            Email = "engineering_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINEERING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "ENGINEERING_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Engineering",
                            SecurityStamp = "629fee88-7095-4f17-8d13-97f5882a74bc",
                            TwoFactorEnabled = false,
                            UserName = "engineering_manager"
                        },
                        new
                        {
                            Id = "51509",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "2afc51d1-89b7-4939-aacb-f11b3f76e698",
                            DepartmentId = 4L,
                            Email = "commercial-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-CT_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Commercial / Containers Section Head",
                            SecurityStamp = "689dd17c-6aaf-4080-b772-6e30ac0608d3",
                            TwoFactorEnabled = false,
                            UserName = "commercial-ct_sec_head"
                        },
                        new
                        {
                            Id = "51583",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "79ad65db-f9c6-4987-8469-c9083f4420ef",
                            DepartmentId = 4L,
                            Email = "commercial-bgc_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-BGC_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-BGC_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "CommercialBulk / GC Section Head",
                            SecurityStamp = "4c7a3df8-3c56-4e20-8588-f7a102abba26",
                            TwoFactorEnabled = false,
                            UserName = "commercial-bgc_sec_head"
                        },
                        new
                        {
                            Id = "90015",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "24d95b59-cdc8-4649-90dd-51f6ef001699",
                            DepartmentId = 10L,
                            Email = "hc-ssp_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - Samsung SDS project  Section Head",
                            SecurityStamp = "d8cbad45-28f3-4c15-88f8-5bf1f961d5e2",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_sec_head"
                        },
                        new
                        {
                            Id = "90008",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "a7f00a5e-2c2b-4eb4-98c9-796c5d9ff6a7",
                            DepartmentId = 11L,
                            Email = "hc-ds_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - DUBUY Sales Section Head",
                            SecurityStamp = "cb794b4b-0232-4b16-9633-0f9f935c1580",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_sec_head"
                        },
                        new
                        {
                            Id = "51520",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "3945f25d-1ede-47ce-b80e-11ecb8f95a1a",
                            DepartmentId = 18L,
                            Email = "qhse_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "QHSE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "QHSE Section HEad",
                            SecurityStamp = "1b24a9d7-3220-4e8b-9d52-8ff76562be61",
                            TwoFactorEnabled = false,
                            UserName = "qhse_sec_head"
                        },
                        new
                        {
                            Id = "51449",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8c273eb2-d519-41c0-a92c-acff32e7e39a",
                            DepartmentId = 13L,
                            Email = "ops-cg_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CG_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CG_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Cargo & Bulk Section Head",
                            SecurityStamp = "4bd4bc61-2bb0-4d5d-8047-1304d6461733",
                            TwoFactorEnabled = false,
                            UserName = "ops-cg_sec_head"
                        },
                        new
                        {
                            Id = "50844",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ba0664ba-3c6c-4011-85b0-d35a3c2940a9",
                            DepartmentId = 13L,
                            Email = "ops-dri_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-DRI_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-DRI Section Head",
                            SecurityStamp = "febbe284-4ba6-498e-b144-8f07deda2d6e",
                            TwoFactorEnabled = false,
                            UserName = "ops-dri_sec_head"
                        },
                        new
                        {
                            Id = "50670",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "3f411688-2486-401d-a924-940f56d3fdfa",
                            DepartmentId = 14L,
                            Email = "ops-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Containers Section Head",
                            SecurityStamp = "c12d5f9f-f91b-4c78-be20-e5d99161f591",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_sec_head"
                        },
                        new
                        {
                            Id = "50128",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f94be5f6-c66b-4744-b5b4-320dd72ee39c",
                            DepartmentId = 14L,
                            Email = "ops-cfs_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CFS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CFS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-CFS Section Head",
                            SecurityStamp = "bf49c839-8aac-440c-baf0-4f342254220b",
                            TwoFactorEnabled = false,
                            UserName = "ops-cfs_sec_head"
                        },
                        new
                        {
                            Id = "51126",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "4351e3a0-0973-487a-a733-45527e5b2cf0",
                            DepartmentId = 21L,
                            Email = "tec-workshop_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-WORKSHOP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-WORKSHOP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Workshop Section Head",
                            SecurityStamp = "4adc27d1-4ab0-4e52-ab0d-3cbd2ab76b06",
                            TwoFactorEnabled = false,
                            UserName = "tec-workshop_sec_head"
                        },
                        new
                        {
                            Id = "51090",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "2029407c-675a-481d-a929-f9d1c7da3324",
                            DepartmentId = 21L,
                            Email = "tec-crane_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-CRANE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-CRANE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Crane Section Head",
                            SecurityStamp = "151133aa-aa7e-45c9-b2dc-9aa449023fcb",
                            TwoFactorEnabled = false,
                            UserName = "tec-crane_sec_head"
                        },
                        new
                        {
                            Id = "50562",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b3d00e4d-0f19-4734-8499-2b0f8122cdc8",
                            Email = "tec-planning_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-PLANNING_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-PLANNING_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Planning Section Head",
                            SecurityStamp = "efbb4bda-c994-472b-bad0-f53358653bd2",
                            TwoFactorEnabled = false,
                            UserName = "tec-planning_sec_head"
                        },
                        new
                        {
                            Id = "51529",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f31a2180-929e-4eaa-8fb3-cfb72ef273b1",
                            DepartmentId = 21L,
                            Email = "projects_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Projects Section Head",
                            SecurityStamp = "98d48fa3-fac2-4a10-8531-34ecdfd238bc",
                            TwoFactorEnabled = false,
                            UserName = "projects_sec_head"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VoucherAmount")
                        .HasColumnType("real");

                    b.Property<string>("VoucherCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryName", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("VoucherRequest", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "51188",
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84"
                        },
                        new
                        {
                            UserId = "51124",
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "security");
                });

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ItAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_User");
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("ApplicationUserRequest")
                        .HasForeignKey("EDocument_Data.Models.ApplicationUserRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("CarRequest")
                        .HasForeignKey("EDocument_Data.Models.CarRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "ApplicationOwner")
                        .WithMany("OwnedApplications")
                        .HasForeignKey("ApplicationOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplication_User");

                    b.Navigation("ApplicationOwner");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "RequestedApplication")
                        .WithMany("DefinedApplicationRoles")
                        .HasForeignKey("RequestedApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplicationRole_RequestedApplication");

                    b.Navigation("RequestedApplication");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("DefinedRequests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequest_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_DefinedRequest");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_DefinedRequest");

                    b.HasOne("EDocument_Data.Models.Role", "Role")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_Role");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Department_User");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("DomainAccountRequest")
                        .HasForeignKey("EDocument_Data.Models.DomainAccountRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DomainAccountRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("PoRequest")
                        .HasForeignKey("EDocument_Data.Models.PoRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PoRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Creator")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("Requests")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_DefinedRequest");

                    b.Navigation("Creator");

                    b.Navigation("DefinedRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "Application")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_Request");

                    b.HasOne("EDocument_Data.Models.DefinedApplicationRole", "Role")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplicationRole");

                    b.Navigation("Application");

                    b.Navigation("Request");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_Request");

                    b.Navigation("Request");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_Department");

                    b.HasOne("EDocument_Data.Models.User", "Head")
                        .WithOne("MangedSection")
                        .HasForeignKey("EDocument_Data.Models.Section", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_User");

                    b.Navigation("Department");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("TravelDeskRequest")
                        .HasForeignKey("EDocument_Data.Models.TravelDeskRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TravelDeskRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_User");

                    b.HasOne("EDocument_Data.Models.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Section");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("VoucherRequest")
                        .HasForeignKey("EDocument_Data.Models.VoucherRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoucherRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Navigation("DefinedApplicationRoles");

                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("DefinedRequestRoles");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Navigation("DefinedRequests");

                    b.Navigation("Employees");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Navigation("ApplicationUserRequest");

                    b.Navigation("Attachments");

                    b.Navigation("CarRequest");

                    b.Navigation("DomainAccountRequest");

                    b.Navigation("PoRequest");

                    b.Navigation("RequestApplicationRoles");

                    b.Navigation("RequestReviewers");

                    b.Navigation("TravelDeskRequest");

                    b.Navigation("VoucherRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Navigation("DefinedRequestRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Navigation("CreatedRequests");

                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("ManagedEmployees");

                    b.Navigation("MangedSection");

                    b.Navigation("OwnedApplications");

                    b.Navigation("RequestReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
