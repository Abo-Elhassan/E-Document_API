// <auto-generated />
using System;
using EDocument_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDocument_EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230923131937_makeRequetNumberStringStep1")]
    partial class makeRequetNumberStringStep1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.Property<string>("ItAdminId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.HasKey("ItAdminId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationItAdmin", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("ApplicationUserRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartureAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LuggageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RetrunDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("CarRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationOwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOwnerId");

                    b.ToTable("DefinedApplication", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestedApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedApplicationId");

                    b.ToTable("DefinedApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewersNumber")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DefinedRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 16L,
                            RequestName = "PO",
                            ReviewersNumber = 1,
                            RouteName = "/Procurement/PO/"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DelegatedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DelegatedUntil")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("DefinedRequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("DefinedRequestReviewer", (string)null);

                    b.HasData(
                        new
                        {
                            DefinedRequestId = 1L,
                            AssignedReviewerId = "51124",
                            ReviewerType = "Basic",
                            StageName = "Finance Reviewer",
                            StageNumber = 1
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "DefinedRequestId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("DefinedRequestRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84",
                            DefinedRequestId = 1L,
                            Permission = "Request"
                        },
                        new
                        {
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975",
                            DefinedRequestId = 1L,
                            Permission = "Review"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentIcon = "Administration.svg",
                            DepartmentName = "Administration",
                            ManagerId = "50269"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentName = "Freight Forwarding",
                            ManagerId = "90010"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentName = "Business Transformation",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentIcon = "Commercial.svg",
                            DepartmentName = "Commercial",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentIcon = "Communications.svg",
                            DepartmentName = "Communications",
                            ManagerId = "51668"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentIcon = "Customer Service.svg",
                            DepartmentName = "Customer Service",
                            ManagerId = "51229"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentName = "Executive Management",
                            ManagerId = "Exp-16"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentName = "Finance",
                            ManagerId = "51124"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentName = "Governmental Relation",
                            ManagerId = "50962"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentName = "HC - DUBUY Sales",
                            ManagerId = "51573"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentName = "HC - Samsung SDS project",
                            ManagerId = "50140"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentIcon = "IT.svg",
                            DepartmentName = "IT",
                            ManagerId = "51331"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentIcon = "OPS-BGC.svg",
                            DepartmentName = "OPS-Cargo & Bulk",
                            ManagerId = "50354"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentName = "OPS-Containers",
                            ManagerId = "50141"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentIcon = "People .svg",
                            DepartmentName = "People",
                            ManagerId = "50279"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentIcon = "Procurement.svg",
                            DepartmentName = "Procurement",
                            ManagerId = "51188"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentName = "Projects & Facility Management",
                            ManagerId = "51659"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentName = "QHSE",
                            ManagerId = "50882"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentIcon = "Security.svg",
                            DepartmentName = "Security",
                            ManagerId = "50263"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentIcon = "Stores.svg",
                            DepartmentName = "Store",
                            ManagerId = "50000"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentIcon = "Technical Engineering.svg",
                            DepartmentName = "Engineering",
                            ManagerId = "50136"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("DomainAccountRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InvoiceAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PoAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VendorNumber")
                        .HasColumnType("int");

                    b.HasKey("PoNumber");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("PoNumber");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("PoRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrentStage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId", "ApplicationId", "RoleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RequestApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReviewerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("RequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("RequestReviewer", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "security");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HeadId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.ToTable("Section", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DepartmentId = 1L,
                            SectionName = "Administration"
                        },
                        new
                        {
                            Id = 2L,
                            DepartmentId = 2L,
                            SectionName = "Freight Forwarding"
                        },
                        new
                        {
                            Id = 3L,
                            DepartmentId = 3L,
                            SectionName = "Business Transformation"
                        },
                        new
                        {
                            Id = 4L,
                            DepartmentId = 4L,
                            HeadId = "51509",
                            SectionName = "Commercial / Containers"
                        },
                        new
                        {
                            Id = 5L,
                            DepartmentId = 4L,
                            HeadId = "51583",
                            SectionName = "Commercial Bulk / GC"
                        },
                        new
                        {
                            Id = 6L,
                            DepartmentId = 5L,
                            SectionName = "Communications"
                        },
                        new
                        {
                            Id = 7L,
                            DepartmentId = 6L,
                            SectionName = "Customer Service"
                        },
                        new
                        {
                            Id = 8L,
                            DepartmentId = 7L,
                            SectionName = "Executive Management"
                        },
                        new
                        {
                            Id = 9L,
                            DepartmentId = 8L,
                            SectionName = "Finance"
                        },
                        new
                        {
                            Id = 10L,
                            DepartmentId = 9L,
                            SectionName = "Governmental Relation"
                        },
                        new
                        {
                            Id = 11L,
                            DepartmentId = 10L,
                            HeadId = "90015",
                            SectionName = "Samsung SDS project"
                        },
                        new
                        {
                            Id = 12L,
                            DepartmentId = 11L,
                            HeadId = "90008",
                            SectionName = "DUBUY- Sales"
                        },
                        new
                        {
                            Id = 13L,
                            DepartmentId = 12L,
                            SectionName = "IT"
                        },
                        new
                        {
                            Id = 14L,
                            DepartmentId = 13L,
                            HeadId = "51449",
                            SectionName = "OPS-Cargo & Bulk"
                        },
                        new
                        {
                            Id = 15L,
                            DepartmentId = 13L,
                            HeadId = "50844",
                            SectionName = "OPS- DRI"
                        },
                        new
                        {
                            Id = 16L,
                            DepartmentId = 14L,
                            HeadId = "50670",
                            SectionName = "OPS-Containers"
                        },
                        new
                        {
                            Id = 17L,
                            DepartmentId = 14L,
                            HeadId = "50128",
                            SectionName = "OPS-CFS"
                        },
                        new
                        {
                            Id = 18L,
                            DepartmentId = 15L,
                            SectionName = "People"
                        },
                        new
                        {
                            Id = 19L,
                            DepartmentId = 16L,
                            SectionName = "Procurement"
                        },
                        new
                        {
                            Id = 20L,
                            DepartmentId = 17L,
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 21L,
                            DepartmentId = 18L,
                            HeadId = "51520",
                            SectionName = "Safety"
                        },
                        new
                        {
                            Id = 22L,
                            DepartmentId = 18L,
                            SectionName = "Clinic"
                        },
                        new
                        {
                            Id = 23L,
                            DepartmentId = 19L,
                            SectionName = "Security"
                        },
                        new
                        {
                            Id = 24L,
                            DepartmentId = 20L,
                            SectionName = "Store"
                        },
                        new
                        {
                            Id = 25L,
                            DepartmentId = 21L,
                            HeadId = "51090",
                            SectionName = "TEC-Crane"
                        },
                        new
                        {
                            Id = 26L,
                            DepartmentId = 21L,
                            HeadId = "51529",
                            SectionName = "Projects"
                        },
                        new
                        {
                            Id = 27L,
                            DepartmentId = 21L,
                            HeadId = "50562",
                            SectionName = "TEC-Planning"
                        },
                        new
                        {
                            Id = 28L,
                            DepartmentId = 21L,
                            HeadId = "51126",
                            SectionName = "TEC-Workshop"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryNationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("smalldatetime");

                    b.Property<float>("CostAllocation")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedTravelTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FlightDestination")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlightOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MissionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("TravelDeskRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SectionId");

                    b.ToTable("User", "security");

                    b.HasData(
                        new
                        {
                            Id = "50269",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8163f487-4c2a-46d6-82d5-a47e373f6284",
                            DepartmentId = 1L,
                            Email = "admin_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN_MANGER@DPWORLD.COM",
                            NormalizedUserName = "ADMIN_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Administration",
                            SecurityStamp = "e6bce0da-8dd4-4f29-8e69-1af9699635fc",
                            TwoFactorEnabled = false,
                            UserName = "admin_manager"
                        },
                        new
                        {
                            Id = "90010",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "7696243a-4a60-4be7-847e-b1196c77670c",
                            DepartmentId = 2L,
                            Email = "freightforwarding_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hanaa Mohamed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREIGHTFORWARDING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FF_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Freight Forwarding",
                            SecurityStamp = "41425363-643c-4029-97b7-f1345feb7988",
                            TwoFactorEnabled = false,
                            UserName = "ff_manager"
                        },
                        new
                        {
                            Id = "51330",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "598065a9-968d-4e20-a591-2ea151fdb49b",
                            DepartmentId = 3L,
                            Email = "businesstransformation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSTRANSFORMATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "BT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Business Transformation",
                            SecurityStamp = "a4a0a5d6-ebcf-4cd0-aaf7-1bf5a0507149",
                            TwoFactorEnabled = false,
                            UserName = "bt_manager"
                        },
                        new
                        {
                            Id = "51573",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "0685cf81-6007-48d9-ad68-ee09060c89a4",
                            DepartmentId = 4L,
                            Email = "commercial_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMERCIAL_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Commercial",
                            SecurityStamp = "87fb7fd7-96c8-4dfd-b275-3856e963d20d",
                            TwoFactorEnabled = false,
                            UserName = "commercial_manager"
                        },
                        new
                        {
                            Id = "51668",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "84b7d436-f5aa-4eaf-bd5f-137df01490ed",
                            DepartmentId = 5L,
                            Email = "communications_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Amina Hatem",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMUNICATIONS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMUNICATIONS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Communications",
                            SecurityStamp = "e818b456-1c23-4aa9-8649-849d44df5d0d",
                            TwoFactorEnabled = false,
                            UserName = "communications_manager"
                        },
                        new
                        {
                            Id = "51229",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "10516454-5615-440d-8c48-b0bd56517916",
                            DepartmentId = 6L,
                            Email = "customerservice_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Nagah",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "CS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Customer Service",
                            SecurityStamp = "873b753d-3389-4751-bc1c-139f666591fe",
                            TwoFactorEnabled = false,
                            UserName = "cs_manager"
                        },
                        new
                        {
                            Id = "Exp-16",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d179e96c-6153-43e4-92b1-39d31ff8444f",
                            DepartmentId = 7L,
                            Email = "executivemanagement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Urs Moll",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXECUTIVEMANAGEMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "EM_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Executive Management",
                            SecurityStamp = "9067904e-5e75-4c8c-a1ea-58845670436b",
                            TwoFactorEnabled = false,
                            UserName = "em_manager"
                        },
                        new
                        {
                            Id = "51124",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "335a5cbd-9af6-4ec4-af91-db07029aefe3",
                            DepartmentId = 8L,
                            Email = "finance_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mustafa Sultan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FINANCE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FINANCE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Finance",
                            SecurityStamp = "7867857e-f741-4fee-8c2a-69f08a78f4c2",
                            TwoFactorEnabled = false,
                            UserName = "finance_manager"
                        },
                        new
                        {
                            Id = "50962",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "282de4d7-58d0-4bb1-9918-985e9b4cb003",
                            DepartmentId = 9L,
                            Email = "governmentalrelation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Tarek",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOVERNMENTALRELATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "GR_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Governmental Relation",
                            SecurityStamp = "3b1ad62a-06ea-418e-97d2-0e6f5a7e15f1",
                            TwoFactorEnabled = false,
                            UserName = "gr_manager"
                        },
                        new
                        {
                            Id = "51572",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "61102ccc-4fb4-4e7c-9f8f-bf31cbad19f7",
                            DepartmentId = 10L,
                            Email = "hc-ds_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - DUBUY Sales",
                            SecurityStamp = "18cbc15d-95e4-4ccf-a153-0cea749c6787",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_manager"
                        },
                        new
                        {
                            Id = "50140",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "fe680b6f-abd6-4f7e-a9b7-8dfb054e0ab7",
                            DepartmentId = 11L,
                            Email = "hc-ssp_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - Samsung SDS project",
                            SecurityStamp = "0b6d63f4-318b-44a9-b8a0-a9793614b898",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_manager"
                        },
                        new
                        {
                            Id = "51331",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "1e4c2d6f-3f10-4ab8-8a16-3c5701f5a5fd",
                            DepartmentId = 12L,
                            Email = "it_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "IT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of IT",
                            SecurityStamp = "4b676cea-aa22-4925-94e1-cab6f239319e",
                            TwoFactorEnabled = false,
                            UserName = "it_manager"
                        },
                        new
                        {
                            Id = "50354",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "52e0eefc-0ff9-42d8-9237-2ba5ae5a318d",
                            DepartmentId = 13L,
                            Email = "ops-bgc_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Radwan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-BGC_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-BGC_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Cargo & Bulk",
                            SecurityStamp = "7700ef47-0541-41c4-9336-d2e09abc6679",
                            TwoFactorEnabled = false,
                            UserName = "ops-bgc_manager"
                        },
                        new
                        {
                            Id = "50141",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "bd2ef68c-f917-4735-9009-ff1bacef2293",
                            DepartmentId = 14L,
                            Email = "ops-ct_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Containers",
                            SecurityStamp = "bc69e837-a9b9-4d02-a4be-ca8d0a5c0b08",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_manager"
                        },
                        new
                        {
                            Id = "50279",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d9dd5f9c-25b8-4eea-b08c-4dca693232c9",
                            DepartmentId = 15L,
                            Email = "people_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Waleed Aboelgadayl",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEOPLE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PEOPLE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of People",
                            SecurityStamp = "d3b1c13d-9d6a-48b7-96eb-7679d891d2a4",
                            TwoFactorEnabled = false,
                            UserName = "people_manager"
                        },
                        new
                        {
                            Id = "51188",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "4b6c469b-d058-4fe4-8524-a0c0dda32be8",
                            DepartmentId = 16L,
                            Email = "procurement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Tamer Elsayed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROCUREMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROCURMENT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Procurment",
                            SecurityStamp = "57d468c0-c33a-4bcf-bf0d-435ac5a59731",
                            TwoFactorEnabled = false,
                            UserName = "procurment_manager"
                        },
                        new
                        {
                            Id = "51659",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f8081b63-4526-4418-afd8-580707bf5015",
                            DepartmentId = 17L,
                            Email = "projectsfacilitymanager_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Mandour",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTSFACILITYMANAGER_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Projects & Facility Management",
                            SecurityStamp = "da45d5db-59bd-4ced-a260-066a79a659ec",
                            TwoFactorEnabled = false,
                            UserName = "projects_manager"
                        },
                        new
                        {
                            Id = "50882",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "ead02c5b-4d93-4b52-acf9-cf836e1c94e9",
                            DepartmentId = 18L,
                            Email = "qhse_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Abdelghany",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "QHSE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of QHSE",
                            SecurityStamp = "ded49b44-09e3-4415-8e7c-24e5643be585",
                            TwoFactorEnabled = false,
                            UserName = "qhse_manager"
                        },
                        new
                        {
                            Id = "50263",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f06fe956-6355-492a-b5a5-be0baf14342c",
                            DepartmentId = 19L,
                            Email = "security_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECURITY_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "SECURITY_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Security",
                            SecurityStamp = "b354e439-11e3-4f0a-8686-22dbd31a8937",
                            TwoFactorEnabled = false,
                            UserName = "security_manager"
                        },
                        new
                        {
                            Id = "50000",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "02660155-9504-4b49-bbd0-75e1924a71fd",
                            DepartmentId = 20L,
                            Email = "stores_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STORES_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "STORES_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Stores",
                            SecurityStamp = "1f17ae02-4833-444f-ab80-0bef84020dd7",
                            TwoFactorEnabled = false,
                            UserName = "stores_manager"
                        },
                        new
                        {
                            Id = "50136",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "0d66a9be-5a70-4377-a2ac-8a18d83d9352",
                            DepartmentId = 21L,
                            Email = "engineering_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINEERING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "ENGINEERING_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Engineering",
                            SecurityStamp = "e648b84e-766c-4879-b3be-bc5726522a36",
                            TwoFactorEnabled = false,
                            UserName = "engineering_manager"
                        },
                        new
                        {
                            Id = "51509",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "f888ca54-5045-4016-9d5f-5c54437dc864",
                            DepartmentId = 4L,
                            Email = "commercial-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-CT_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Commercial / Containers Section Head",
                            SecurityStamp = "86a16185-9da7-468f-86f3-b95c4e6e1b12",
                            TwoFactorEnabled = false,
                            UserName = "commercial-ct_sec_head"
                        },
                        new
                        {
                            Id = "51583",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5757a361-6c4d-4cb3-af66-6ebc03c51529",
                            DepartmentId = 4L,
                            Email = "commercial-bgc_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-BGC_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-BGC_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "CommercialBulk / GC Section Head",
                            SecurityStamp = "3426d2d8-fefd-4e28-9fa9-c27a0d382931",
                            TwoFactorEnabled = false,
                            UserName = "commercial-bgc_sec_head"
                        },
                        new
                        {
                            Id = "90015",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "32074e46-643d-4e33-8cfd-5ccb2fd5e999",
                            DepartmentId = 10L,
                            Email = "hc-ssp_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - Samsung SDS project  Section Head",
                            SecurityStamp = "1633b729-dda7-4e73-99a6-988ce149bcac",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_sec_head"
                        },
                        new
                        {
                            Id = "90008",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "3293cd17-9d96-4d7e-bae7-ffb6c0eb4610",
                            DepartmentId = 11L,
                            Email = "hc-ds_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - DUBUY Sales Section Head",
                            SecurityStamp = "3f4660d7-71e4-41e8-b589-ce145298cfe0",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_sec_head"
                        },
                        new
                        {
                            Id = "51520",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "e01925c9-51c3-429d-ad15-bff0658eeef2",
                            DepartmentId = 18L,
                            Email = "qhse_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "QHSE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "QHSE Section HEad",
                            SecurityStamp = "f401fab3-5274-4b18-8608-0851f00cf3cb",
                            TwoFactorEnabled = false,
                            UserName = "qhse_sec_head"
                        },
                        new
                        {
                            Id = "51449",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "970112fe-5277-4b21-85b1-f1f00982ef3d",
                            DepartmentId = 13L,
                            Email = "ops-cg_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CG_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CG_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Cargo & Bulk Section Head",
                            SecurityStamp = "ead079d9-cfe6-4154-9940-9774298f007e",
                            TwoFactorEnabled = false,
                            UserName = "ops-cg_sec_head"
                        },
                        new
                        {
                            Id = "50844",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "e7f22b90-acce-4124-b841-f0c4a8d460e6",
                            DepartmentId = 13L,
                            Email = "ops-dri_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-DRI_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-DRI Section Head",
                            SecurityStamp = "cc290f7c-ec47-45ee-83f8-0c43f069db21",
                            TwoFactorEnabled = false,
                            UserName = "ops-dri_sec_head"
                        },
                        new
                        {
                            Id = "50670",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5e83859f-f909-44b9-9169-e8792bd40b35",
                            DepartmentId = 14L,
                            Email = "ops-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Containers Section Head",
                            SecurityStamp = "2dcf82b1-525b-4866-aac3-31dc7cdb032f",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_sec_head"
                        },
                        new
                        {
                            Id = "50128",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "64942102-f4df-4998-998d-7e2fea34d373",
                            DepartmentId = 14L,
                            Email = "ops-cfs_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CFS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CFS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-CFS Section Head",
                            SecurityStamp = "c68ab939-9bd1-4159-bbe7-0cca28312bcf",
                            TwoFactorEnabled = false,
                            UserName = "ops-cfs_sec_head"
                        },
                        new
                        {
                            Id = "51126",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b4c0a243-748f-4361-8cae-dfbc8ed83416",
                            DepartmentId = 21L,
                            Email = "tec-workshop_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-WORKSHOP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-WORKSHOP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Workshop Section Head",
                            SecurityStamp = "d6664c54-ee8f-45cb-9e15-64e444d5e111",
                            TwoFactorEnabled = false,
                            UserName = "tec-workshop_sec_head"
                        },
                        new
                        {
                            Id = "51090",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "9c83e270-6b00-4ca6-a9a8-30b49a258bf6",
                            DepartmentId = 21L,
                            Email = "tec-crane_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-CRANE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-CRANE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Crane Section Head",
                            SecurityStamp = "5608482c-34cb-483a-85a0-cd84822b1cd0",
                            TwoFactorEnabled = false,
                            UserName = "tec-crane_sec_head"
                        },
                        new
                        {
                            Id = "50562",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "e22bed75-6fc0-4a88-a1ac-8b7b04f75b88",
                            Email = "tec-planning_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-PLANNING_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-PLANNING_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Planning Section Head",
                            SecurityStamp = "0838813c-34d9-4a44-9ecc-474ad933f506",
                            TwoFactorEnabled = false,
                            UserName = "tec-planning_sec_head"
                        },
                        new
                        {
                            Id = "51529",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5b9da121-7e91-4621-8bd3-e007411b0d6b",
                            DepartmentId = 21L,
                            Email = "projects_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Projects Section Head",
                            SecurityStamp = "3f3084ba-f92a-4db3-9dcc-3f6ad8905244",
                            TwoFactorEnabled = false,
                            UserName = "projects_sec_head"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VoucherAmount")
                        .HasColumnType("real");

                    b.Property<string>("VoucherCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryName", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("VoucherRequest", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");

                    b.HasData(
                        new
                        {
                            UserId = "51188",
                            RoleId = "6826ac7e-b4ae-47ff-8bf6-cc904db43d84"
                        },
                        new
                        {
                            UserId = "51124",
                            RoleId = "121c1742-99e7-4b61-ab2f-f748876e2975"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "security");
                });

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ItAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_User");
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("ApplicationUserRequest")
                        .HasForeignKey("EDocument_Data.Models.ApplicationUserRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("CarRequest")
                        .HasForeignKey("EDocument_Data.Models.CarRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "ApplicationOwner")
                        .WithMany("OwnedApplications")
                        .HasForeignKey("ApplicationOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplication_User");

                    b.Navigation("ApplicationOwner");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "RequestedApplication")
                        .WithMany("DefinedApplicationRoles")
                        .HasForeignKey("RequestedApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplicationRole_RequestedApplication");

                    b.Navigation("RequestedApplication");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("DefinedRequests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequest_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_DefinedRequest");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_DefinedRequest");

                    b.HasOne("EDocument_Data.Models.Role", "Role")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_Role");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Department_User");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("DomainAccountRequest")
                        .HasForeignKey("EDocument_Data.Models.DomainAccountRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DomainAccountRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("PoRequest")
                        .HasForeignKey("EDocument_Data.Models.PoRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PoRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Creator")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("Requests")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_DefinedRequest");

                    b.Navigation("Creator");

                    b.Navigation("DefinedRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "Application")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_Request");

                    b.HasOne("EDocument_Data.Models.DefinedApplicationRole", "Role")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplicationRole");

                    b.Navigation("Application");

                    b.Navigation("Request");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_Request");

                    b.Navigation("Request");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_Department");

                    b.HasOne("EDocument_Data.Models.User", "Head")
                        .WithOne("MangedSection")
                        .HasForeignKey("EDocument_Data.Models.Section", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_User");

                    b.Navigation("Department");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("TravelDeskRequest")
                        .HasForeignKey("EDocument_Data.Models.TravelDeskRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TravelDeskRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_User");

                    b.HasOne("EDocument_Data.Models.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Section");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("VoucherRequest")
                        .HasForeignKey("EDocument_Data.Models.VoucherRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoucherRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Navigation("DefinedApplicationRoles");

                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("DefinedRequestRoles");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Navigation("DefinedRequests");

                    b.Navigation("Employees");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Navigation("ApplicationUserRequest");

                    b.Navigation("Attachments");

                    b.Navigation("CarRequest");

                    b.Navigation("DomainAccountRequest");

                    b.Navigation("PoRequest");

                    b.Navigation("RequestApplicationRoles");

                    b.Navigation("RequestReviewers");

                    b.Navigation("TravelDeskRequest");

                    b.Navigation("VoucherRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Navigation("DefinedRequestRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Navigation("CreatedRequests");

                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("ManagedEmployees");

                    b.Navigation("MangedSection");

                    b.Navigation("OwnedApplications");

                    b.Navigation("RequestReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
