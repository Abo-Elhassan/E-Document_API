// <auto-generated />
using System;
using EDocument_EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDocument_EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230920180025_addUsers")]
    partial class addUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.Property<string>("ItAdminId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.HasKey("ItAdminId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationItAdmin", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("ApplicationUserRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartureAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LuggageDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RetrunDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("CarRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationOwnerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationOwnerId");

                    b.ToTable("DefinedApplication", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestedApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RequestedApplicationId");

                    b.ToTable("DefinedApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ReviewersNumber")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DefinedRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DelegatedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DelegatedUntil")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.HasKey("DefinedRequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("DefinedRequestReviewer", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "DefinedRequestId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("DefinedRequestRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DepartmentIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("DomainAccountRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorFullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InvoiceAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PoAttachmentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VendorNumber")
                        .HasColumnType("int");

                    b.HasKey("PoNumber");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("PoNumber"), false);

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("RequestId"));

                    b.HasIndex("VendorName");

                    b.ToTable("PoRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CurrentStage")
                        .HasColumnType("int");

                    b.Property<long>("DefinedRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DefinedRequestId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId", "ApplicationId", "RoleId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RequestApplicationRole", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignedReviewerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReviewedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReviewerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StageNumber")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RequestId", "AssignedReviewerId");

                    b.HasIndex("AssignedReviewerId");

                    b.ToTable("RequestReviewer", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "security");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("HeadId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HeadId")
                        .IsUnique()
                        .HasFilter("[HeadId] IS NOT NULL");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.Property<string>("BeneficiaryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("BeneficiaryDepartment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryExtention")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BeneficiaryNationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BeneficiaryPostion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("smalldatetime");

                    b.Property<float>("CostAllocation")
                        .HasColumnType("real");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("DestinationCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpectedTravelTime")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("FlightDestination")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FlightOrigin")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MissionAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestTypes")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("BeneficiaryId", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("TravelDeskRequest", (string)null);
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SectionId");

                    b.ToTable("User", "security");

                    b.HasData(
                        new
                        {
                            Id = "50269",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "d5539061-dd90-4af9-9b9f-e6d631858db3",
                            Email = "admin_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN_MANGER@DPWORLD.COM",
                            NormalizedUserName = "ADMIN_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Administration",
                            SecurityStamp = "526f7add-a1c2-4827-883b-f4e0b80e8aa0",
                            TwoFactorEnabled = false,
                            UserName = "admin_manager"
                        },
                        new
                        {
                            Id = "90010",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "6029212d-198d-44e2-8863-68a1a41ce9a5",
                            Email = "freightforwarding_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hanaa Mohamed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FREIGHTFORWARDING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FF_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Freight Forwarding",
                            SecurityStamp = "ba6866f4-f323-46c6-86ce-7763454458ea",
                            TwoFactorEnabled = false,
                            UserName = "ff_manager"
                        },
                        new
                        {
                            Id = "51330",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "562c5d28-4bb0-4f11-ac49-61aada72cd42",
                            Email = "businesstransformation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSINESSTRANSFORMATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "BT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Business Transformation",
                            SecurityStamp = "ac4c3daf-0b06-4aa2-a771-5b30b588b32d",
                            TwoFactorEnabled = false,
                            UserName = "bt_manager"
                        },
                        new
                        {
                            Id = "51573",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b63f8874-bf67-4305-9376-79f47f15651f",
                            Email = "commercial_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMERCIAL_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Commercial",
                            SecurityStamp = "68b94b1b-e27f-4098-8b53-1d011f6c490f",
                            TwoFactorEnabled = false,
                            UserName = "commercial_manager"
                        },
                        new
                        {
                            Id = "51668",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "022f52dc-e26b-4336-8f6a-9c8560757bf1",
                            Email = "communications_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Amina Hatem",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "COMMUNICATIONS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "COMMUNICATIONS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Communications",
                            SecurityStamp = "8e9ea6c7-a314-4edd-8e3c-3c75d92bdc24",
                            TwoFactorEnabled = false,
                            UserName = "communications_manager"
                        },
                        new
                        {
                            Id = "51229",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "84629739-d9d3-41f2-9175-80fa86c68dd3",
                            Email = "customerservice_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Nagah",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMERSERVICE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "CS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Customer Service",
                            SecurityStamp = "18341a46-59cc-4a57-a0cf-b2a38cb0fd8e",
                            TwoFactorEnabled = false,
                            UserName = "cs_manager"
                        },
                        new
                        {
                            Id = "Exp-16",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8269e4c6-7b65-4c2a-8d49-954725d8a870",
                            Email = "executivemanagement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Urs Moll",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EXECUTIVEMANAGEMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "EM_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Executive Management",
                            SecurityStamp = "a80d9dfd-b444-4e21-96d0-69a9d4cfca7e",
                            TwoFactorEnabled = false,
                            UserName = "em_manager"
                        },
                        new
                        {
                            Id = "51124",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b80b5316-275c-497f-b618-4e92ce78daa6",
                            Email = "finance_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mustafa Sultan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FINANCE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "FINANCE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Finance",
                            SecurityStamp = "c7c9b518-188a-4c63-80e8-0c2c3191ba61",
                            TwoFactorEnabled = false,
                            UserName = "finance_manager"
                        },
                        new
                        {
                            Id = "50962",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "be61dc10-de9d-496d-82e4-4d7f61815b86",
                            Email = "governmentalrelation_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Tarek",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOVERNMENTALRELATION_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "GR_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Governmental Relation",
                            SecurityStamp = "a7b0a511-bfd8-4ee5-b593-fcfb90c66ddd",
                            TwoFactorEnabled = false,
                            UserName = "gr_manager"
                        },
                        new
                        {
                            Id = "51572",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "186a90c2-8c56-40f9-bbc5-a2c9d448899b",
                            Email = "hc-ds_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Aliaa Elgammal",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - DUBUY Sales",
                            SecurityStamp = "75997ffa-538e-4f65-9bbf-9f1a6132e7ac",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_manager"
                        },
                        new
                        {
                            Id = "50140",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "a24227a8-d29e-4846-b9c2-1430a5b5ef4d",
                            Email = "hc-ssp_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of HC - Samsung SDS project",
                            SecurityStamp = "748ce9e0-cdbe-42d7-8298-0a399ed8c4ed",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_manager"
                        },
                        new
                        {
                            Id = "51331",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "297b44b1-1b8e-416a-9c62-8375cdf7b0b5",
                            Email = "it_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Alaa Nasr",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "IT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "IT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of IT",
                            SecurityStamp = "c675b550-03cd-4369-903b-35e0da9d06c2",
                            TwoFactorEnabled = false,
                            UserName = "it_manager"
                        },
                        new
                        {
                            Id = "50354",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "dcdf3033-59b2-4ff4-9b43-9cd9e309760f",
                            Email = "ops-bgc_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Radwan",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-BGC_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-BGC_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Cargo & Bulk",
                            SecurityStamp = "acb895c6-7afe-441e-a6af-e46f437f66da",
                            TwoFactorEnabled = false,
                            UserName = "ops-bgc_manager"
                        },
                        new
                        {
                            Id = "50141",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5472297b-4536-487c-81fd-6903e5e7fb42",
                            Email = "ops-ct_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Maged Mohsen",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of OPS-Containers",
                            SecurityStamp = "91a57fe5-f7af-4aaa-805b-da484291cb09",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_manager"
                        },
                        new
                        {
                            Id = "50279",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "47a6226c-ee5e-40ea-bb21-d9e12cb1eabc",
                            Email = "people_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Waleed Aboelgadayl",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PEOPLE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PEOPLE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of People",
                            SecurityStamp = "15522425-8b72-4883-900a-b2b5a2e4bc7c",
                            TwoFactorEnabled = false,
                            UserName = "people_manager"
                        },
                        new
                        {
                            Id = "51188",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "6701aaa2-4f7a-457c-8fd2-0647a0bd3512",
                            Email = "procurement_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Tamer Elsayed",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROCUREMENT_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROCURMENT_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Procurment",
                            SecurityStamp = "87ea2a66-a8ec-4d66-bede-18f636a31583",
                            TwoFactorEnabled = false,
                            UserName = "procurment_manager"
                        },
                        new
                        {
                            Id = "51659",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "b1e34d8a-d27f-4103-8ef7-be6776df490b",
                            Email = "projectsfacilitymanager_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Mohamed Mandour",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTSFACILITYMANAGER_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Projects & Facility Management",
                            SecurityStamp = "154b96ba-646f-49b9-b7cc-7096f89c56da",
                            TwoFactorEnabled = false,
                            UserName = "projects_manager"
                        },
                        new
                        {
                            Id = "50882",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "a2d8beb0-f8d0-40cb-b560-926107d3aec8",
                            Email = "qhse_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Hassan Abdelghany",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "QHSE_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of QHSE",
                            SecurityStamp = "b7ce9d3d-87dc-473b-a4bb-7058aa7e1f28",
                            TwoFactorEnabled = false,
                            UserName = "qhse_manager"
                        },
                        new
                        {
                            Id = "50263",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c5e27ef9-c00c-4a19-a5b9-8f3f66ebebba",
                            Email = "security_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SECURITY_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "SECURITY_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Security",
                            SecurityStamp = "560f936f-c0aa-4145-a044-43c042ed3506",
                            TwoFactorEnabled = false,
                            UserName = "security_manager"
                        },
                        new
                        {
                            Id = "50000",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "972b65f0-691d-4789-9811-c54f1e743db8",
                            Email = "stores_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STORES_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "STORES_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Stores",
                            SecurityStamp = "3ffd62a2-dbc3-4282-bab1-d53134a091d4",
                            TwoFactorEnabled = false,
                            UserName = "stores_manager"
                        },
                        new
                        {
                            Id = "50136",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "51479dfb-001d-4a77-9f8c-cb87a778dd04",
                            Email = "engineering_manager@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGINEERING_MANAGER@DPWORLD.COM",
                            NormalizedUserName = "ENGINEERING_MANAGER",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Head of Engineering",
                            SecurityStamp = "2157ac66-9989-4cd4-8928-832ab727d2a7",
                            TwoFactorEnabled = false,
                            UserName = "engineering_manager"
                        },
                        new
                        {
                            Id = "51509",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "4b3f40fa-5aba-4e43-b404-19937eda299c",
                            Email = "commercial-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-CT_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Commercial / Containers Section Head",
                            SecurityStamp = "8e9bf403-8514-4dd7-8304-18dda6aab048",
                            TwoFactorEnabled = false,
                            UserName = "commercial-ct_sec_head"
                        },
                        new
                        {
                            Id = "51583",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "427cfd7c-0bf1-4fcf-a92b-79a93859ffea",
                            Email = "commercial-bgc_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ECOMMERCIAL-BGC_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "COMMERCIAL-BGC_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "CommercialBulk / GC Section Head",
                            SecurityStamp = "9297fa06-b271-47e5-b9b4-909fc4b99b1c",
                            TwoFactorEnabled = false,
                            UserName = "commercial-bgc_sec_head"
                        },
                        new
                        {
                            Id = "90015",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "547c07e3-94f5-47c9-abb4-1f795fd0b853",
                            Email = "hc-ssp_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-SSP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-SSP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - Samsung SDS project  Section Head",
                            SecurityStamp = "0d782f9b-6db0-45b0-95e4-cca1c523fdb6",
                            TwoFactorEnabled = false,
                            UserName = "hc-ssp_sec_head"
                        },
                        new
                        {
                            Id = "90008",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "3b0aa359-2340-4f86-b11b-d041ec13e493",
                            Email = "hc-ds_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HC-DS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "HC-DS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "HC - DUBUY Sales Section Head",
                            SecurityStamp = "ff35b8ab-3f98-41c4-a568-d630b4197086",
                            TwoFactorEnabled = false,
                            UserName = "hc-ds_sec_head"
                        },
                        new
                        {
                            Id = "51520",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "5fbb7cf1-204a-42d3-b2e0-250dd5e5a937",
                            Email = "qhse_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "QHSE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "QHSE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "QHSE Section HEad",
                            SecurityStamp = "b44a04d0-64b9-4edc-bd90-02194ed0f6b0",
                            TwoFactorEnabled = false,
                            UserName = "qhse_sec_head"
                        },
                        new
                        {
                            Id = "51449",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "95df6ff4-25ab-487e-b056-a0521133eb1c",
                            Email = "ops-cg_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CG_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CG_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Cargo & Bulk Section Head",
                            SecurityStamp = "b85b7858-fa75-4237-ba4f-c8188ea035c2",
                            TwoFactorEnabled = false,
                            UserName = "ops-cg_sec_head"
                        },
                        new
                        {
                            Id = "50844",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "bea0f7a6-2acc-4a7b-aa29-c27229645dc0",
                            Email = "ops-dri_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-DRI_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-DRI Section Head",
                            SecurityStamp = "5655fabd-cf06-46df-bdf5-bac5bb1fb096",
                            TwoFactorEnabled = false,
                            UserName = "ops-dri_sec_head"
                        },
                        new
                        {
                            Id = "50670",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "a3d4d66e-1f2d-4935-bd9b-f640fcd1c4a3",
                            Email = "ops-ct_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-DRI_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CT_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-Containers Section Head",
                            SecurityStamp = "1bccf348-21b7-4f3d-87f3-653318fb2956",
                            TwoFactorEnabled = false,
                            UserName = "ops-ct_sec_head"
                        },
                        new
                        {
                            Id = "50128",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "715d44fb-0228-4034-8c95-a5d17190e030",
                            Email = "ops-cfs_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "OPS-CFS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "OPS-CFS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "OPS-CFS Section Head",
                            SecurityStamp = "fbb09dd6-d5f4-493e-addd-e268bd5a860c",
                            TwoFactorEnabled = false,
                            UserName = "ops-cfs_sec_head"
                        },
                        new
                        {
                            Id = "51126",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "4465aaf7-2f7f-447d-88f4-645e24ad8038",
                            Email = "tec-workshop_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-WORKSHOP_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-WORKSHOP_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Workshop Section Head",
                            SecurityStamp = "42f61812-5090-47c6-bd6b-9a397d6fbef1",
                            TwoFactorEnabled = false,
                            UserName = "tec-workshop_sec_head"
                        },
                        new
                        {
                            Id = "51090",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "c72df6df-dc11-4712-ac39-af062c24cc01",
                            Email = "tec-crane_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-CRANE_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-CRANE_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Crane Section Head",
                            SecurityStamp = "8f28ff1c-6a07-4ae3-a1ae-5cd88ad2862a",
                            TwoFactorEnabled = false,
                            UserName = "tec-crane_sec_head"
                        },
                        new
                        {
                            Id = "50562",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "23aa6a00-1309-43b6-802f-197e22f4abcc",
                            Email = "tec-planning_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEC-PLANNING_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "TEC-PLANNING_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "TEC-Planning Section Head",
                            SecurityStamp = "c4618284-b2cd-4749-acae-69a12a7884f8",
                            TwoFactorEnabled = false,
                            UserName = "tec-planning_sec_head"
                        },
                        new
                        {
                            Id = "51529",
                            AccessFailedCount = 0,
                            Company = "DP World",
                            ConcurrencyStamp = "8f89279e-77e1-4b1e-9064-2f387102e328",
                            Email = "projects_sec_head@dpworld.com",
                            EmailConfirmed = false,
                            FullName = "Ahmed Zaki",
                            IsActive = true,
                            IsEmployee = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJECTS_SEC_HEAD@DPWORLD.COM",
                            NormalizedUserName = "PROJECTS_SEC_HEAD",
                            PhoneNumber = "01002234498",
                            PhoneNumberConfirmed = false,
                            Position = "Projects Section Head",
                            SecurityStamp = "42348360-b046-412e-8507-4a146033143b",
                            TwoFactorEnabled = false,
                            UserName = "projects_sec_head"
                        });
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.Property<string>("BeneficiaryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("VoucherAmount")
                        .HasColumnType("real");

                    b.Property<string>("VoucherCurrency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BeneficiaryName", "RequestId");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.ToTable("VoucherRequest", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "security");
                });

            modelBuilder.Entity("ApplicationItAdmin", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ItAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationItAdmin_User");
                });

            modelBuilder.Entity("EDocument_Data.Models.ApplicationUserRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("ApplicationUserRequest")
                        .HasForeignKey("EDocument_Data.Models.ApplicationUserRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicationUserRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Attachment", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("Attachments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attachment_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.CarRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("CarRequest")
                        .HasForeignKey("EDocument_Data.Models.CarRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "ApplicationOwner")
                        .WithMany("OwnedApplications")
                        .HasForeignKey("ApplicationOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplication_User");

                    b.Navigation("ApplicationOwner");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "RequestedApplication")
                        .WithMany("DefinedApplicationRoles")
                        .HasForeignKey("RequestedApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedApplicationRole_RequestedApplication");

                    b.Navigation("RequestedApplication");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("DefinedRequests")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequest_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestReviewers")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestReviewer_DefinedRequest");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequestRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_DefinedRequest");

                    b.HasOne("EDocument_Data.Models.Role", "Role")
                        .WithMany("DefinedRequestRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DefinedRequestRole_Role");

                    b.Navigation("DefinedRequest");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Department_User");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EDocument_Data.Models.DomainAccountRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("DomainAccountRequest")
                        .HasForeignKey("EDocument_Data.Models.DomainAccountRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DomainAccountRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.PoRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("PoRequest")
                        .HasForeignKey("EDocument_Data.Models.PoRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PoRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Creator")
                        .WithMany("CreatedRequests")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_User");

                    b.HasOne("EDocument_Data.Models.DefinedRequest", "DefinedRequest")
                        .WithMany("Requests")
                        .HasForeignKey("DefinedRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_DefinedRequest");

                    b.Navigation("Creator");

                    b.Navigation("DefinedRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestApplicationRole", b =>
                {
                    b.HasOne("EDocument_Data.Models.DefinedApplication", "Application")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplication");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_Request");

                    b.HasOne("EDocument_Data.Models.DefinedApplicationRole", "Role")
                        .WithMany("RequestApplicationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestApplicationRole_DefinedApplicationRole");

                    b.Navigation("Application");

                    b.Navigation("Request");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EDocument_Data.Models.RequestReviewer", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", "Reviewer")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_User");

                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithMany("RequestReviewers")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RequestReviewer_Request");

                    b.Navigation("Request");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_Department");

                    b.HasOne("EDocument_Data.Models.User", "Head")
                        .WithOne("MangedSection")
                        .HasForeignKey("EDocument_Data.Models.Section", "HeadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Section_User");

                    b.Navigation("Department");

                    b.Navigation("Head");
                });

            modelBuilder.Entity("EDocument_Data.Models.TravelDeskRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("TravelDeskRequest")
                        .HasForeignKey("EDocument_Data.Models.TravelDeskRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TravelDeskRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.HasOne("EDocument_Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Department");

                    b.HasOne("EDocument_Data.Models.User", "Manager")
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_User");

                    b.HasOne("EDocument_Data.Models.Section", "Section")
                        .WithMany("Employees")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_Section");

                    b.Navigation("Department");

                    b.Navigation("Manager");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EDocument_Data.Models.VoucherRequest", b =>
                {
                    b.HasOne("EDocument_Data.Models.Request", "Request")
                        .WithOne("VoucherRequest")
                        .HasForeignKey("EDocument_Data.Models.VoucherRequest", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_VoucherRequest_Request");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDocument_Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplication", b =>
                {
                    b.Navigation("DefinedApplicationRoles");

                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedApplicationRole", b =>
                {
                    b.Navigation("RequestApplicationRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.DefinedRequest", b =>
                {
                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("DefinedRequestRoles");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("EDocument_Data.Models.Department", b =>
                {
                    b.Navigation("DefinedRequests");

                    b.Navigation("Employees");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("EDocument_Data.Models.Request", b =>
                {
                    b.Navigation("ApplicationUserRequest");

                    b.Navigation("Attachments");

                    b.Navigation("CarRequest");

                    b.Navigation("DomainAccountRequest");

                    b.Navigation("PoRequest");

                    b.Navigation("RequestApplicationRoles");

                    b.Navigation("RequestReviewers");

                    b.Navigation("TravelDeskRequest");

                    b.Navigation("VoucherRequest");
                });

            modelBuilder.Entity("EDocument_Data.Models.Role", b =>
                {
                    b.Navigation("DefinedRequestRoles");
                });

            modelBuilder.Entity("EDocument_Data.Models.Section", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EDocument_Data.Models.User", b =>
                {
                    b.Navigation("CreatedRequests");

                    b.Navigation("DefinedRequestReviewers");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("ManagedEmployees");

                    b.Navigation("MangedSection");

                    b.Navigation("OwnedApplications");

                    b.Navigation("RequestReviewers");
                });
#pragma warning restore 612, 618
        }
    }
}
